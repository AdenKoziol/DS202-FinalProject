# price per square foot
cleaned_data <- cleaned_data %>%
mutate(price_per_sqft = price / house_size)
# price per square foot
cleaned_data <- cleaned_data %>%
mutate(price_per_sqft = price / house_size)
library(tidyverse)
library(knitr)
realtor_data <- read_csv("realtor-data.csv")
head(realtor_data)
# Missing values
missing_values <- colSums(is.na(realtor_data))
kable(missing_values, caption = "Missing Values per Column")
# Remove rows with missing critical data (e.g., price, bedrooms)
cleaned_data <- realtor_data %>%
drop_na(price, bed, bath, house_size)
# Remove duplicates
cleaned_data <- distinct(cleaned_data)
# Convert price to numeric (if stored as character)
cleaned_data <- cleaned_data %>%
mutate(price = as.numeric(gsub("[\\$,]", "", price)))
# Filter out unrealistic prices (e.g., below $10,000 or above $10M)
cleaned_data <- cleaned_data %>%
filter(price >= 10000 & price <= 10000000)
# Summary statistics for numeric variables
summary_stats <- cleaned_data %>%
select(price, bed, bath, house_size) %>%
summary()
kable(summary_stats, caption = "Summary Statistics")
# Distribution of categorical variables (e.g., state, city)
if ("state" %in% colnames(cleaned_data)) {
state_counts <- cleaned_data %>%
count(state) %>%
arrange(desc(n))
kable(state_counts, caption = "Property Count by State")
}
# price per square foot
cleaned_data <- cleaned_data %>%
mutate(price_per_sqft = price / house_size)
# plot
library(ggplot2)
cleaned_data %>%
group_by(state) %>%
summarise(avg_price_per_sqft = mean(price_per_sqft, na.rm = TRUE)) %>%
ggplot(aes(x = reorder(state, -avg_price_per_sqft), y = avg_price_per_sqft)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Average Price per Square Foot by State",
x = "State",
y = "Price per Sqft ($)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# classify urban, suburban, and rural cities
cleaned_data <- cleaned_data %>%
mutate(
location_type = case_when(
city %in% c("Des Moines", "Cedar Rapids") ~ "Urban",
city %in% c("North Liberty", "Coralville") ~ "Suburban",
city %in% c("Elma", "Sac City") ~ "Rural",
TRUE ~ NA_character_
)
) %>%
filter(state == "Iowa" & !is.na(location_type))
# price per square foot
avg_price_sqft <- cleaned_data %>%
group_by(location_type) %>%
summarise(
avg_price_per_sqft = mean(price_per_sqft, na.rm = TRUE),
se = sd(price_per_sqft, na.rm = TRUE) / sqrt(n())
)
kable(avg_price_sqft, caption = "Avg. Price per Sqft by Location Type")
# plot
library(ggplot2)
ggplot(avg_price_sqft, aes(x = location_type, y = avg_price_per_sqft, fill = location_type)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = avg_price_per_sqft - se, ymax = avg_price_per_sqft + se),
width = 0.2,
color = "black"
) +
scale_fill_manual(values = c("Urban" = "#E69F00", "Suburban" = "#56B4E9", "Rural" = "#009E73")) +
labs(
title = "Price per Square Foot in Iowa by Location Type",
subtitle = "Urban (Des Moines, Cedar Rapids) vs. Suburban (North Liberty, Coralville) vs. Rural (Elma, Sac City)",
x = "Location Type",
y = "Price per Sqft ($)",
fill = "Location Type"
) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend (redundant with x-axis labels)
# classify urban, suburban, and rural cities
cleaned_data <- cleaned_data %>%
mutate(
location_type = case_when(
city %in% c("New York", "Brooklyn") ~ "Urban",
city %in% c("White Plains", "Huntington") ~ "Suburban",
city %in% c("Cooperstown", "Lake Placid") ~ "Rural",
TRUE ~ NA_character_
)
) %>%
filter(state == "New York" & !is.na(location_type))  # Focus on NY and selected cities
# price per square foot
ny_avg_price <- cleaned_data %>%
group_by(location_type) %>%
summarise(
avg_price_sqft = mean(price_per_sqft, na.rm = TRUE),
se = sd(price_per_sqft, na.rm = TRUE) / sqrt(n())  # Standard error
)
ny_avg_price
kable(avg_price_sqft, caption = "Avg. Price per Sqft by Location Type")
# plot
library(ggplot2)
ggplot(ny_avg_price, aes(x = reorder(location_type, -avg_price_sqft),
y = avg_price_sqft,
fill = location_type)) +
geom_col(width = 0.7) +
geom_errorbar(
aes(ymin = avg_price_sqft - se, ymax = avg_price_sqft + se),
width = 0.2,
color = "black"
) +
scale_fill_brewer(palette = "Set2") +
scale_y_continuous(labels = scales::dollar) +
labs(
title = "Price per Square Foot in New York by Location Type",
subtitle = "Urban (NYC, Brooklyn) vs. Suburban (White Plains, Huntington) vs. Rural (Cooperstown, Lake Placid)",
x = NULL,
y = "Price per Sqft ($)",
caption = "Error bars show standard error"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# classify urban, suburban, and rural cities
cleaned_data <- cleaned_data %>%
mutate(
location_type = case_when(
city %in% c("New York", "Brooklyn") ~ "Urban",
city %in% c("White Plains", "Huntington") ~ "Suburban",
city %in% c("Cooperstown", "Lake Placid") ~ "Rural",
TRUE ~ NA_character_
)
) %>%
filter(state == "New York" & !is.na(location_type))  # Focus on NY and selected cities
# price per square foot
ny_avg_price <- cleaned_data %>%
group_by(location_type) %>%
summarise(
avg_price_sqft = mean(price_per_sqft, na.rm = TRUE),
se = sd(price_per_sqft, na.rm = TRUE) / sqrt(n())  # Standard error
)
kable(avg_price_sqft, caption = "Avg. Price per Sqft by Location Type")
# plot
library(ggplot2)
ggplot(ny_avg_price, aes(x = reorder(location_type, -avg_price_sqft),
y = avg_price_sqft,
fill = location_type)) +
geom_col(width = 0.7) +
geom_errorbar(
aes(ymin = avg_price_sqft - se, ymax = avg_price_sqft + se),
width = 0.2,
color = "black"
) +
scale_fill_brewer(palette = "Set2") +
scale_y_continuous(labels = scales::dollar) +
labs(
title = "Price per Square Foot in New York by Location Type",
subtitle = "Urban (NYC, Brooklyn) vs. Suburban (White Plains, Huntington) vs. Rural (Cooperstown, Lake Placid)",
x = NULL,
y = "Price per Sqft ($)",
caption = "Error bars show standard error"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# classify urban, suburban, and rural cities
cleaned_data <- cleaned_data %>%
mutate(
location_type = case_when(
city %in% c("Des Moines", "Cedar Rapids") ~ "Urban",
city %in% c("North Liberty", "Coralville") ~ "Suburban",
city %in% c("Elma", "Sac City") ~ "Rural",
TRUE ~ NA_character_  # Exclude other cities
)
) %>%
filter(state == "Iowa" & !is.na(location_type))  # Focus on Iowa and our 6 cities
# price per square foot
avg_price_sqft <- cleaned_data %>%
group_by(location_type) %>%
summarise(
avg_price_per_sqft = mean(price_per_sqft, na.rm = TRUE),
se = sd(price_per_sqft, na.rm = TRUE) / sqrt(n())  # Standard error for error bars
)
kable(avg_price_sqft, caption = "Avg. Price per Sqft by Location Type")
# plot
library(ggplot2)
ggplot(avg_price_sqft, aes(x = location_type, y = avg_price_per_sqft, fill = location_type)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = avg_price_per_sqft - se, ymax = avg_price_per_sqft + se),
width = 0.2,
color = "black"
) +
scale_fill_manual(values = c("Urban" = "#E69F00", "Suburban" = "#56B4E9", "Rural" = "#009E73")) +
labs(
title = "Price per Square Foot in Iowa by Location Type",
subtitle = "Urban (Des Moines, Cedar Rapids) vs. Suburban (North Liberty, Coralville) vs. Rural (Elma, Sac City)",
x = "Location Type",
y = "Price per Sqft ($)",
fill = "Location Type"
) +
theme_minimal() +
theme(legend.position = "none")  # Remove legend (redundant with x-axis labels)
# classify urban, suburban, and rural cities
cleaned_data <- cleaned_data %>%
mutate(
location_type = case_when(
city %in% c("Des Moines", "Cedar Rapids") ~ "Urban",
city %in% c("North Liberty", "Coralville") ~ "Suburban",
city %in% c("Elma", "Sac City") ~ "Rural",
TRUE ~ NA_character_  # Exclude other cities
)
) %>%
filter(state == "Iowa" & !is.na(location_type))
# price per square foot
avg_price_sqft <- cleaned_data %>%
group_by(location_type) %>%
summarise(
avg_price_per_sqft = mean(price_per_sqft, na.rm = TRUE),
)
# plot
library(ggplot2)
ggplot(avg_price_sqft, aes(x = location_type, y = avg_price_per_sqft, fill = location_type)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = avg_price_per_sqft - se, ymax = avg_price_per_sqft + se),
width = 0.2,
color = "black"
) +
scale_fill_manual(values = c("Urban" = "#E69F00", "Suburban" = "#56B4E9", "Rural" = "#009E73")) +
labs(
title = "Price per Square Foot in Iowa by Location Type",
subtitle = "Urban (Des Moines, Cedar Rapids) vs. Suburban (North Liberty, Coralville) vs. Rural (Elma, Sac City)",
x = "Location Type",
y = "Price per Sqft ($)",
fill = "Location Type"
) +
theme_minimal() +
theme(legend.position = "none")
# classify urban, suburban, and rural cities
cleaned_data <- cleaned_data %>%
mutate(
location_type = case_when(
city %in% c("Des Moines", "Cedar Rapids") ~ "Urban",
city %in% c("North Liberty", "Coralville") ~ "Suburban",
city %in% c("Elma", "Sac City") ~ "Rural",
TRUE ~ NA_character_
)
) %>%
filter(state == "Iowa" & !is.na(location_type))
# price per square foot
avg_price_sqft <- cleaned_data %>%
group_by(location_type) %>%
summarise(
avg_price_per_sqft = mean(price_per_sqft, na.rm = TRUE),
se = sd(price_per_sqft, na.rm = TRUE) / sqrt(n())
)
# plot
library(ggplot2)
ggplot(avg_price_sqft, aes(x = location_type, y = avg_price_per_sqft, fill = location_type)) +
geom_bar(stat = "identity") +
geom_errorbar(
aes(ymin = avg_price_per_sqft - se, ymax = avg_price_per_sqft + se),
width = 0.2,
color = "black"
) +
scale_fill_manual(values = c("Urban" = "#E69F00", "Suburban" = "#56B4E9", "Rural" = "#009E73")) +
labs(
title = "Price per Square Foot in Iowa by Location Type",
x = "Location Type",
y = "Price per Sqft ($)",
fill = "Location Type"
) +
theme_minimal() +
theme(legend.position = "none")
# Median price by bedrooms 1 - 6
bedroom_price <- cleaned_data %>%
filter(bed %in% 1:6) %>%
group_by(bed) %>%
summarise(median_price = median(price, na.rm = TRUE))
# plot
ggplot(bedroom_price, aes(x = bed, y = median_price)) +
geom_line(color = "#0072B2", linewidth = 1.5) +
geom_point(size = 3, color = "#D55E00") +
scale_y_continuous(labels = scales::dollar) +
labs(
title = "Median Home Price by Number of Bedrooms",
subtitle = "Prices typically increase with bedrooms but may plateau after 4+",
x = "Number of Bedrooms",
y = "Median Price ($)"
) +
theme_minimal()
# get max in data
max_bedrooms <- max(cleaned_data$bed, na.rm = TRUE)
bedroom_summary <- cleaned_data %>%
filter(bed >= 1) %>% # Exclude invalid/NA values
group_by(bed) %>%
summarise(
median_price = median(price, na.rm = TRUE),
n = n()
) %>%
filter(n >= 10) # Only show groups with sufficient data
# plot
ggplot(bedroom_summary, aes(x = bed, y = median_price)) +
geom_line(color = "#1f77b4", linewidth = 1.5) +
geom_point(aes(size = n), color = "#ff7f0e") + # Point size reflects sample size
scale_y_continuous(labels = scales::dollar,
breaks = scales::pretty_breaks(n = 8)) +
scale_x_continuous(breaks = seq(1, max_bedrooms, by = 1)) +
labs(
title = "Home Price by Bedroom Count",
subtitle = paste("Analysis up to", max_bedrooms, "bedrooms | Circle size = # of listings"),
x = "Number of Bedrooms",
y = "Median Price",
caption = "Excludes groups with <10 listings"
) +
theme_minimal() +
theme(legend.position = "none")
# get max in data
max_bedrooms <- max(cleaned_data$bed, na.rm = TRUE)
bedroom_summary <- cleaned_data %>%
filter(bed >= 1) %>%
group_by(bed) %>%
summarise(
median_price = median(price, na.rm = TRUE),
n = n()
) %>%
filter(n >= 10)
# plot
ggplot(bedroom_summary, aes(x = bed, y = median_price)) +
geom_line(color = "#1f77b4", linewidth = 1.2, alpha = 0.8) +
geom_point(color = "#ff7f0e", size = 3.5, shape = 21, fill = "white", stroke = 1.5) +
geom_text(aes(label = ifelse(n < 20, paste0("n=", n), ""),
vjust = -1.2, size = 3, color = "gray50") +
scale_y_continuous(
labels = scales::dollar,
breaks = scales::pretty_breaks(n = 8),
expand = expansion(mult = c(0.05, 0.1))  # Add padding above points
) +
scale_x_continuous(
breaks = seq(1, max_bedrooms, by = 1),
expand = expansion(mult = 0.05)
) +
labs(
title = "Median Home Price by Bedroom Count",
subtitle = "New York Residential Properties",
x = "Number of Bedrooms",
y = "Median Price ($)",
caption = "Labels show sample size for groups with n < 20"
) +
theme_minimal(base_size = 12) +
theme(
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(color = "gray50", margin = margin(b = 10))
# get max in data
max_bedrooms <- max(cleaned_data$bed, na.rm = TRUE)
bedroom_summary <- cleaned_data %>%
filter(bed >= 1) %>%
group_by(bed) %>%
summarise(
median_price = median(price, na.rm = TRUE),
n = n()
) %>%
filter(n >= 10)
# plot
ggplot(bedroom_summary, aes(x = bed, y = median_price)) +
geom_line(color = "#1f77b4", linewidth = 1.5) +
geom_point(aes, color = "#ff7f0e") +
scale_y_continuous(labels = scales::dollar,
breaks = scales::pretty_breaks(n = 8)) +
scale_x_continuous(breaks = seq(1, max_bedrooms, by = 1)) +
labs(
title = "Home Price by Bedroom Count",
x = "Number of Bedrooms",
y = "Median Price",
caption = "Excludes groups with <10 listings"
) +
theme_minimal() +
theme(legend.position = "none")
# get max in data
max_bedrooms <- max(cleaned_data$bed, na.rm = TRUE)
bedroom_summary <- cleaned_data %>%
filter(bed >= 1) %>%
group_by(bed) %>%
summarise(
median_price = median(price, na.rm = TRUE),
n = n()
) %>%
filter(n >= 10)
# plot
ggplot(bedroom_summary, aes(x = bed, y = median_price)) +
geom_line(color = "#1f77b4", linewidth = 1.5) +
geom_point(color = "#ff7f0e") +
scale_y_continuous(labels = scales::dollar,
breaks = scales::pretty_breaks(n = 8)) +
scale_x_continuous(breaks = seq(1, max_bedrooms, by = 1)) +
labs(
title = "Home Price by Bedroom Count",
x = "Number of Bedrooms",
y = "Median Price",
caption = "Excludes groups with <10 listings"
) +
theme_minimal() +
theme(legend.position = "none")
# Median price by bedrooms 1 - 10
bedroom_price <- cleaned_data %>%
filter(bed %in% 1:10) %>%
group_by(bed) %>%
summarise(median_price = median(price, na.rm = TRUE))
# plot
ggplot(bedroom_price, aes(x = bed, y = median_price)) +
geom_line(color = "#0072B2", linewidth = 1.5) +
geom_point(size = 3, color = "#D55E00") +
scale_y_continuous(labels = scales::dollar) +
labs(
title = "Median Home Price by Number of Bedrooms",
x = "Number of Bedrooms",
y = "Median Price ($)"
) +
theme_minimal()
# Median price by bedrooms 1 - 6
bedroom_price <- cleaned_data %>%
filter(bed %in% 1:6) %>%
group_by(bed) %>%
summarise(median_price = median(price, na.rm = TRUE))
# plot
ggplot(bedroom_price, aes(x = bed, y = median_price)) +
geom_line(color = "#0072B2", linewidth = 1.5) +
geom_point(size = 3, color = "#D55E00") +
scale_y_continuous(labels = scales::dollar) +
labs(
title = "Median Home Price by Number of Bedrooms",
x = "Number of Bedrooms",
y = "Median Price ($)"
) +
theme_minimal()
library(tidyverse)
library(knitr)
realtor_data <- read_csv("realtor-data.csv")
# Missing values
missing_values <- colSums(is.na(realtor_data))
# Remove rows with missing critical data (e.g., price, bedrooms)
cleaned_data <- realtor_data %>%
drop_na(price, bed, bath, house_size)
# Remove duplicates
cleaned_data <- distinct(cleaned_data)
# Convert price to numeric (if stored as character)
cleaned_data <- cleaned_data %>%
mutate(price = as.numeric(gsub("[\\$,]", "", price)))
# Filter out unrealistic prices (e.g., below $10,000 or above $10M)
cleaned_data <- cleaned_data %>%
filter(price >= 10000 & price <= 10000000)
